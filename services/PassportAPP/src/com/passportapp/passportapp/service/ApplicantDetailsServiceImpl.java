/*Copyright (c) 2015-2016 imaginea-com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea-com*/
package com.passportapp.passportapp.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.passportapp.passportapp.ApplicantDetails;


/**
 * ServiceImpl object for domain model class ApplicantDetails.
 *
 * @see ApplicantDetails
 */
@Service("PassportAPP.ApplicantDetailsService")
public class ApplicantDetailsServiceImpl implements ApplicantDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantDetailsServiceImpl.class);


    @Autowired
    @Qualifier("PassportAPP.ApplicantDetailsDao")
    private WMGenericDao<ApplicantDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ApplicantDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "PassportAPPTransactionManager")
    @Override
	public ApplicantDetails create(ApplicantDetails applicantDetails) {
        LOGGER.debug("Creating a new ApplicantDetails with information: {}", applicantDetails);
        ApplicantDetails applicantDetailsCreated = this.wmGenericDao.create(applicantDetails);
        return applicantDetailsCreated;
    }

	@Transactional(readOnly = true, value = "PassportAPPTransactionManager")
	@Override
	public ApplicantDetails getById(Integer applicantdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding ApplicantDetails by id: {}", applicantdetailsId);
        ApplicantDetails applicantDetails = this.wmGenericDao.findById(applicantdetailsId);
        if (applicantDetails == null){
            LOGGER.debug("No ApplicantDetails found with id: {}", applicantdetailsId);
            throw new EntityNotFoundException(String.valueOf(applicantdetailsId));
        }
        return applicantDetails;
    }

    @Transactional(readOnly = true, value = "PassportAPPTransactionManager")
	@Override
	public ApplicantDetails findById(Integer applicantdetailsId) {
        LOGGER.debug("Finding ApplicantDetails by id: {}", applicantdetailsId);
        return this.wmGenericDao.findById(applicantdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "PassportAPPTransactionManager")
	@Override
	public ApplicantDetails update(ApplicantDetails applicantDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating ApplicantDetails with information: {}", applicantDetails);
        this.wmGenericDao.update(applicantDetails);

        Integer applicantdetailsId = applicantDetails.getId();

        return this.wmGenericDao.findById(applicantdetailsId);
    }

    @Transactional(value = "PassportAPPTransactionManager")
	@Override
	public ApplicantDetails delete(Integer applicantdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantDetails with id: {}", applicantdetailsId);
        ApplicantDetails deleted = this.wmGenericDao.findById(applicantdetailsId);
        if (deleted == null) {
            LOGGER.debug("No ApplicantDetails found with id: {}", applicantdetailsId);
            throw new EntityNotFoundException(String.valueOf(applicantdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "PassportAPPTransactionManager")
	@Override
	public Page<ApplicantDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ApplicantDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "PassportAPPTransactionManager")
    @Override
    public Page<ApplicantDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ApplicantDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "PassportAPPTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service PassportAPP for table ApplicantDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "PassportAPPTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "PassportAPPTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

