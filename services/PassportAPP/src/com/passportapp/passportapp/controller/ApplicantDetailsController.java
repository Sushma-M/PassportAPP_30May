/*Copyright (c) 2015-2016 imaginea-com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea-com*/
package com.passportapp.passportapp.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.passportapp.passportapp.ApplicantDetails;
import com.passportapp.passportapp.service.ApplicantDetailsService;


/**
 * Controller object for domain model class ApplicantDetails.
 * @see ApplicantDetails
 */
@RestController("PassportAPP.ApplicantDetailsController")
@Api(value = "ApplicantDetailsController", description = "Exposes APIs to work with ApplicantDetails resource.")
@RequestMapping("/PassportAPP/ApplicantDetails")
public class ApplicantDetailsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantDetailsController.class);

    @Autowired
	@Qualifier("PassportAPP.ApplicantDetailsService")
	private ApplicantDetailsService applicantDetailsService;

	@ApiOperation(value = "Creates a new ApplicantDetails instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public ApplicantDetails createApplicantDetails(@RequestBody ApplicantDetails applicantDetails) {
		LOGGER.debug("Create ApplicantDetails with information: {}" , applicantDetails);

		applicantDetails = applicantDetailsService.create(applicantDetails);
		LOGGER.debug("Created ApplicantDetails with information: {}" , applicantDetails);

	    return applicantDetails;
	}


    @ApiOperation(value = "Returns the ApplicantDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ApplicantDetails getApplicantDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantDetails with id: {}" , id);

        ApplicantDetails foundApplicantDetails = applicantDetailsService.getById(id);
        LOGGER.debug("ApplicantDetails details with id: {}" , foundApplicantDetails);

        return foundApplicantDetails;
    }

    @ApiOperation(value = "Updates the ApplicantDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ApplicantDetails editApplicantDetails(@PathVariable("id") Integer id, @RequestBody ApplicantDetails applicantDetails) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantDetails with id: {}" , applicantDetails.getId());

        applicantDetails.setId(id);
        applicantDetails = applicantDetailsService.update(applicantDetails);
        LOGGER.debug("ApplicantDetails details with id: {}" , applicantDetails);

        return applicantDetails;
    }

    @ApiOperation(value = "Deletes the ApplicantDetails instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteApplicantDetails(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantDetails with id: {}" , id);

        ApplicantDetails deletedApplicantDetails = applicantDetailsService.delete(id);

        return deletedApplicantDetails != null;
    }

    /**
     * @deprecated Use {@link #findApplicantDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ApplicantDetails instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ApplicantDetails> searchApplicantDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ApplicantDetails list");
        return applicantDetailsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ApplicantDetails instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ApplicantDetails> findApplicantDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ApplicantDetails list");
        return applicantDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ApplicantDetails instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ApplicantDetails> filterApplicantDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ApplicantDetails list");
        return applicantDetailsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportApplicantDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return applicantDetailsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ApplicantDetails instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countApplicantDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ApplicantDetails");
		return applicantDetailsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getApplicantDetailsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return applicantDetailsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ApplicantDetailsService instance
	 */
	protected void setApplicantDetailsService(ApplicantDetailsService service) {
		this.applicantDetailsService = service;
	}

}

